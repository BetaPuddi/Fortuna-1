//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.6.3
//     from Assets/Scripts/InputActions.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @InputActions: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @InputActions()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""InputActions"",
    ""maps"": [
        {
            ""name"": ""ControllerHorizontal"",
            ""id"": ""66d88761-eb4a-487e-b196-c30f59fa91b7"",
            ""actions"": [
                {
                    ""name"": ""Move"",
                    ""type"": ""PassThrough"",
                    ""id"": ""1f849e9c-078c-4658-a330-77490c66e062"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": ""StickDeadzone(min=0.5)"",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": ""2D Vector"",
                    ""id"": ""fa5d59b1-4acc-4dca-8d7f-9b43534f991a"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""dad1d406-2b7c-4b72-b530-af4ee050b980"",
                    ""path"": ""<Gamepad>/leftStick/up"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""0948dec1-0a0d-4d16-aa6d-c94c5e30bd80"",
                    ""path"": ""<Gamepad>/leftStick/down"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""705687bd-36b5-472f-aaa8-3244b8dfd621"",
                    ""path"": ""<Gamepad>/leftStick/left"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""0d46e1fb-945a-4c7e-95bd-a39a7035f74c"",
                    ""path"": ""<Gamepad>/leftStick/right"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                }
            ]
        },
        {
            ""name"": ""ControllerVertical"",
            ""id"": ""2fa3938c-fcc8-4601-8347-ffcfd5dcf2dc"",
            ""actions"": [
                {
                    ""name"": ""New action"",
                    ""type"": ""PassThrough"",
                    ""id"": ""bad329bf-2d52-4ee2-9ad9-f6d053cf22de"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": ""StickDeadzone(min=0.5)"",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": ""2D Vector"",
                    ""id"": ""642da89e-c6f8-4226-9d97-1283a1fcf39d"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""New action"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""f4641ce9-2de9-4ab8-831b-2fb281fa8167"",
                    ""path"": ""<Gamepad>/leftStick/up"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""New action"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""aa8af5e1-9915-43cc-ba28-bf67efa579fe"",
                    ""path"": ""<Gamepad>/leftStick/down"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""New action"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""b120b476-81a5-4964-9367-7478f0a62969"",
                    ""path"": ""<Gamepad>/leftStick/left"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""New action"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""3edc06c9-724d-4bab-8d13-439041540ce4"",
                    ""path"": ""<Gamepad>/leftStick/right"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""New action"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                }
            ]
        },
        {
            ""name"": ""ControllerBrake"",
            ""id"": ""f803072e-06f0-4f7a-8de5-845deee97800"",
            ""actions"": [
                {
                    ""name"": ""New action"",
                    ""type"": ""Button"",
                    ""id"": ""e218a63c-9ef0-4ca5-bd82-a26b9992ca29"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""3ea32013-c374-4058-9ad3-0f7d1fe804dd"",
                    ""path"": ""<Gamepad>/buttonSouth"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""New action"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""ControllerPowerup"",
            ""id"": ""579fa11b-734f-4651-b9ed-876e875a52fc"",
            ""actions"": [
                {
                    ""name"": ""UsePowerup"",
                    ""type"": ""Button"",
                    ""id"": ""17170a2b-d3b0-4e79-b354-3db6f735c00e"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""430ceb6c-0afb-4a8a-a420-ff103ad7f0c4"",
                    ""path"": ""<Gamepad>/buttonWest"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""UsePowerup"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // ControllerHorizontal
        m_ControllerHorizontal = asset.FindActionMap("ControllerHorizontal", throwIfNotFound: true);
        m_ControllerHorizontal_Move = m_ControllerHorizontal.FindAction("Move", throwIfNotFound: true);
        // ControllerVertical
        m_ControllerVertical = asset.FindActionMap("ControllerVertical", throwIfNotFound: true);
        m_ControllerVertical_Newaction = m_ControllerVertical.FindAction("New action", throwIfNotFound: true);
        // ControllerBrake
        m_ControllerBrake = asset.FindActionMap("ControllerBrake", throwIfNotFound: true);
        m_ControllerBrake_Newaction = m_ControllerBrake.FindAction("New action", throwIfNotFound: true);
        // ControllerPowerup
        m_ControllerPowerup = asset.FindActionMap("ControllerPowerup", throwIfNotFound: true);
        m_ControllerPowerup_UsePowerup = m_ControllerPowerup.FindAction("UsePowerup", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // ControllerHorizontal
    private readonly InputActionMap m_ControllerHorizontal;
    private List<IControllerHorizontalActions> m_ControllerHorizontalActionsCallbackInterfaces = new List<IControllerHorizontalActions>();
    private readonly InputAction m_ControllerHorizontal_Move;
    public struct ControllerHorizontalActions
    {
        private @InputActions m_Wrapper;
        public ControllerHorizontalActions(@InputActions wrapper) { m_Wrapper = wrapper; }
        public InputAction @Move => m_Wrapper.m_ControllerHorizontal_Move;
        public InputActionMap Get() { return m_Wrapper.m_ControllerHorizontal; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(ControllerHorizontalActions set) { return set.Get(); }
        public void AddCallbacks(IControllerHorizontalActions instance)
        {
            if (instance == null || m_Wrapper.m_ControllerHorizontalActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_ControllerHorizontalActionsCallbackInterfaces.Add(instance);
            @Move.started += instance.OnMove;
            @Move.performed += instance.OnMove;
            @Move.canceled += instance.OnMove;
        }

        private void UnregisterCallbacks(IControllerHorizontalActions instance)
        {
            @Move.started -= instance.OnMove;
            @Move.performed -= instance.OnMove;
            @Move.canceled -= instance.OnMove;
        }

        public void RemoveCallbacks(IControllerHorizontalActions instance)
        {
            if (m_Wrapper.m_ControllerHorizontalActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IControllerHorizontalActions instance)
        {
            foreach (var item in m_Wrapper.m_ControllerHorizontalActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_ControllerHorizontalActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public ControllerHorizontalActions @ControllerHorizontal => new ControllerHorizontalActions(this);

    // ControllerVertical
    private readonly InputActionMap m_ControllerVertical;
    private List<IControllerVerticalActions> m_ControllerVerticalActionsCallbackInterfaces = new List<IControllerVerticalActions>();
    private readonly InputAction m_ControllerVertical_Newaction;
    public struct ControllerVerticalActions
    {
        private @InputActions m_Wrapper;
        public ControllerVerticalActions(@InputActions wrapper) { m_Wrapper = wrapper; }
        public InputAction @Newaction => m_Wrapper.m_ControllerVertical_Newaction;
        public InputActionMap Get() { return m_Wrapper.m_ControllerVertical; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(ControllerVerticalActions set) { return set.Get(); }
        public void AddCallbacks(IControllerVerticalActions instance)
        {
            if (instance == null || m_Wrapper.m_ControllerVerticalActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_ControllerVerticalActionsCallbackInterfaces.Add(instance);
            @Newaction.started += instance.OnNewaction;
            @Newaction.performed += instance.OnNewaction;
            @Newaction.canceled += instance.OnNewaction;
        }

        private void UnregisterCallbacks(IControllerVerticalActions instance)
        {
            @Newaction.started -= instance.OnNewaction;
            @Newaction.performed -= instance.OnNewaction;
            @Newaction.canceled -= instance.OnNewaction;
        }

        public void RemoveCallbacks(IControllerVerticalActions instance)
        {
            if (m_Wrapper.m_ControllerVerticalActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IControllerVerticalActions instance)
        {
            foreach (var item in m_Wrapper.m_ControllerVerticalActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_ControllerVerticalActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public ControllerVerticalActions @ControllerVertical => new ControllerVerticalActions(this);

    // ControllerBrake
    private readonly InputActionMap m_ControllerBrake;
    private List<IControllerBrakeActions> m_ControllerBrakeActionsCallbackInterfaces = new List<IControllerBrakeActions>();
    private readonly InputAction m_ControllerBrake_Newaction;
    public struct ControllerBrakeActions
    {
        private @InputActions m_Wrapper;
        public ControllerBrakeActions(@InputActions wrapper) { m_Wrapper = wrapper; }
        public InputAction @Newaction => m_Wrapper.m_ControllerBrake_Newaction;
        public InputActionMap Get() { return m_Wrapper.m_ControllerBrake; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(ControllerBrakeActions set) { return set.Get(); }
        public void AddCallbacks(IControllerBrakeActions instance)
        {
            if (instance == null || m_Wrapper.m_ControllerBrakeActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_ControllerBrakeActionsCallbackInterfaces.Add(instance);
            @Newaction.started += instance.OnNewaction;
            @Newaction.performed += instance.OnNewaction;
            @Newaction.canceled += instance.OnNewaction;
        }

        private void UnregisterCallbacks(IControllerBrakeActions instance)
        {
            @Newaction.started -= instance.OnNewaction;
            @Newaction.performed -= instance.OnNewaction;
            @Newaction.canceled -= instance.OnNewaction;
        }

        public void RemoveCallbacks(IControllerBrakeActions instance)
        {
            if (m_Wrapper.m_ControllerBrakeActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IControllerBrakeActions instance)
        {
            foreach (var item in m_Wrapper.m_ControllerBrakeActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_ControllerBrakeActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public ControllerBrakeActions @ControllerBrake => new ControllerBrakeActions(this);

    // ControllerPowerup
    private readonly InputActionMap m_ControllerPowerup;
    private List<IControllerPowerupActions> m_ControllerPowerupActionsCallbackInterfaces = new List<IControllerPowerupActions>();
    private readonly InputAction m_ControllerPowerup_UsePowerup;
    public struct ControllerPowerupActions
    {
        private @InputActions m_Wrapper;
        public ControllerPowerupActions(@InputActions wrapper) { m_Wrapper = wrapper; }
        public InputAction @UsePowerup => m_Wrapper.m_ControllerPowerup_UsePowerup;
        public InputActionMap Get() { return m_Wrapper.m_ControllerPowerup; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(ControllerPowerupActions set) { return set.Get(); }
        public void AddCallbacks(IControllerPowerupActions instance)
        {
            if (instance == null || m_Wrapper.m_ControllerPowerupActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_ControllerPowerupActionsCallbackInterfaces.Add(instance);
            @UsePowerup.started += instance.OnUsePowerup;
            @UsePowerup.performed += instance.OnUsePowerup;
            @UsePowerup.canceled += instance.OnUsePowerup;
        }

        private void UnregisterCallbacks(IControllerPowerupActions instance)
        {
            @UsePowerup.started -= instance.OnUsePowerup;
            @UsePowerup.performed -= instance.OnUsePowerup;
            @UsePowerup.canceled -= instance.OnUsePowerup;
        }

        public void RemoveCallbacks(IControllerPowerupActions instance)
        {
            if (m_Wrapper.m_ControllerPowerupActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IControllerPowerupActions instance)
        {
            foreach (var item in m_Wrapper.m_ControllerPowerupActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_ControllerPowerupActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public ControllerPowerupActions @ControllerPowerup => new ControllerPowerupActions(this);
    public interface IControllerHorizontalActions
    {
        void OnMove(InputAction.CallbackContext context);
    }
    public interface IControllerVerticalActions
    {
        void OnNewaction(InputAction.CallbackContext context);
    }
    public interface IControllerBrakeActions
    {
        void OnNewaction(InputAction.CallbackContext context);
    }
    public interface IControllerPowerupActions
    {
        void OnUsePowerup(InputAction.CallbackContext context);
    }
}
